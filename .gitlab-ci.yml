stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - apk add --no-cache openssh-client
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Building Docker image..."
    - docker build -t eainvitation-api:$CI_COMMIT_SHA .
    - docker save eainvitation-api:$CI_COMMIT_SHA > app-image.tar
  artifacts:
    paths:
      - app-image.tar
    expire_in: 1 hour
  only:
    - main

deploy:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to production server..."
    
    # Transfer Docker image to server
    - scp app-image.tar $SERVER_USER@$SERVER_HOST:/tmp/
    
    # Transfer docker-compose and environment files
    - scp docker-compose.yml $SERVER_USER@$SERVER_HOST:/opt/eainvitation/
    - scp .env.production $SERVER_USER@$SERVER_HOST:/opt/eainvitation/.env
    
    # Execute deployment commands on server
    - ssh $SERVER_USER@$SERVER_HOST "
        cd /opt/eainvitation &&
        
        # Load new Docker image
        docker load < /tmp/app-image.tar &&
        
        # Stop existing containers
        docker-compose down &&
        
        # Update image tag in docker-compose
        sed -i 's/eainvitation-api:latest/eainvitation-api:$CI_COMMIT_SHA/g' docker-compose.yml &&
        
        # Start new containers
        docker-compose up -d &&
        
        # Run Laravel commands
        docker-compose exec -T app php artisan config:cache &&
        docker-compose exec -T app php artisan route:cache &&
        docker-compose exec -T app php artisan view:cache &&
        docker-compose exec -T app php artisan migrate --force &&
        
        # Clean up
        rm /tmp/app-image.tar &&
        docker image prune -f
      "
    
    - echo "Deployment completed successfully!"
  
  dependencies:
    - build
  only:
    - main
  when: manual